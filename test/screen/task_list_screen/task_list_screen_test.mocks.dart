// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_tasks_7_3/test/screen/task_list_screen/task_list_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_tasks_7_3/core/arch/domain/entity/common/result.dart'
    as _i2;
import 'package:flutter_tasks_7_3/domain/usecase/task/add_task_usecase.dart'
    as _i5;
import 'package:flutter_tasks_7_3/domain/usecase/task/get_all_tasks_usecase.dart'
    as _i3;
import 'package:flutter_tasks_7_3/domain/usecase/task/remove_task_usecase.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<T> extends _i1.SmartFake implements _i2.Result<T> {
  _FakeResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetAllTasksUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllTasksUseCase extends _i1.Mock
    implements _i3.GetAllTasksUseCase {
  @override
  _i4.Future<_i2.Result<List<String>>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i4.Future<_i2.Result<List<String>>>.value(
            _FakeResult_0<List<String>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.Result<List<String>>>.value(
            _FakeResult_0<List<String>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Result<List<String>>>);
}

/// A class which mocks [AddTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddTaskUseCase extends _i1.Mock implements _i5.AddTaskUseCase {
  @override
  _i4.Future<_i2.Result<List<String>>> call({required String? task}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#task: task},
        ),
        returnValue: _i4.Future<_i2.Result<List<String>>>.value(
            _FakeResult_0<List<String>>(
          this,
          Invocation.method(
            #call,
            [],
            {#task: task},
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.Result<List<String>>>.value(
            _FakeResult_0<List<String>>(
          this,
          Invocation.method(
            #call,
            [],
            {#task: task},
          ),
        )),
      ) as _i4.Future<_i2.Result<List<String>>>);
}

/// A class which mocks [RemoveTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveTaskUseCase extends _i1.Mock implements _i6.RemoveTaskUseCase {
  @override
  _i4.Future<_i2.Result<List<String>>> call({required String? task}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#task: task},
        ),
        returnValue: _i4.Future<_i2.Result<List<String>>>.value(
            _FakeResult_0<List<String>>(
          this,
          Invocation.method(
            #call,
            [],
            {#task: task},
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.Result<List<String>>>.value(
            _FakeResult_0<List<String>>(
          this,
          Invocation.method(
            #call,
            [],
            {#task: task},
          ),
        )),
      ) as _i4.Future<_i2.Result<List<String>>>);
}
